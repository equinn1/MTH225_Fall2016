\documentclass{article}

\begin{document}
Week7IC1 Simple regression
<<>>=
load("EPA_mileage.Rdata")
str(epa)
@
Select city records only:
<<>>=
epacity<-subset(epa,C.H=='C')  #select city mileage - C.H must be 'C' for city
nrow(epacity)
weight<-epacity$etw/1000  #etw has vehicle weight (in thousands of pounds)
mpg<-epacity$mpg          #mpg has miles per gallon
N<-nrow(epacity)          #number of observations
mean(mpg)
sd(mpg)
@
Ordinary least squares regression
<<>>=
lm1<-lm(mpg~weight)
summary(lm1)
@
Call STAN
<<>>=
library(rstan)                                #make sure rstan is available
rstan_options(auto_write = TRUE)              #use multiple cores
options(mc.cores = parallel::detectCores())   #if we have them
stanfit<-stan("week7_IC1_simple_regression.stan")     #call STAN using defaults
print(stanfit)
@

Compute a 95\% confidence interval for the predicted mpg of a vehicle that weighs 4000 pounds.
<<>>=
post_draw<-extract(stanfit)
str(post_draw)
mpg4000<-post_draw$icpt+4.0*post_draw$slope
quantile(mpg4000,c(0.025,0.5,0.975))
@

<<>>=
library(reshape2)
library(ggplot2)
wt<-seq(2.5,by=0.2,length.out=20)
Nwt=length(wt)
Ndraw=length(post_draw$icpt)
ydf<-data.frame(wt)

for (i in 1:75){
  ydf<-cbind(ydf,post_draw$icpt[[i]]+wt*post_draw$slope[[i]])
}
ynames=c("wt",rep("y",75))
for (i in 2:76){
  ynames[[i]]=paste("y",as.character(i-1),sep="")
}
str(ynames)
names(ydf)<-ynames
str(ydf)
test_data_long <- melt(ydf, id="wt")  # convert to long format
str(test_data_long)

ggplot(data=test_data_long,
       aes(x=wt, y=value, colour=variable)) +
       geom_line()
@

<<>>=
library(shinystan)
launch_shinystan(stanfit)
@

\end{document}